from ftw.builder import Builder
from ftw.builder import create
from ftw.testbrowser import browsing
from ftw.linkchecker.tests.base import FunctionalTestCase
import pandas as pd
import os
from ftw.linkchecker import report_generating
from ftw.linkchecker.cell_format import BOLD, CENTER, DEFAULT_FONTNAME, DEFAULT_FONTSIZE


CURRENT_PATH = os.path.dirname(os.path.abspath(__file__))


class TestLinkChecker(FunctionalTestCase):

    @browsing
    def test_finds_links_in_plone_site(self, browsing):
        """Checks if links in page are found and broken ones can be excluded.
        """
        self.set_up_test_environment()
        pass

    @browsing
    def test_finds_broken_relations(self, browsing):
        """Checks if broken relations in page are found.
        """
        self.set_up_test_environment()
        pass

    def test_if_excel_generator_adds_content_correctly(self):
        """Test if an excel workbook generated by the linkchecker does not
        differ an exemplar workbook containing the expected data.
        """
        path_of_excel_workbook_generated = (
            CURRENT_PATH +
            '/exemplar_data/generator_excel_sheet_to_compare.xlsx')
        path_of_excel_workbook_exemplar = (
            CURRENT_PATH +
            '/exemplar_data/expected_excel_sheet_outcome.xlsx')

        self.generate_test_data_excel_workbook(
            path_of_excel_workbook_generated)

        # import the excel workbooks as pandas dataframes
        df1 = pd.read_excel(
            path_of_excel_workbook_generated)
        df2 = pd.read_excel(
            path_of_excel_workbook_exemplar)

        assert df1.equals(df2), \
            "The examplar excel workbook converges from the one generated."

    def test_if_mail_sender_sending_mail_incl_attachement(self):
        """Test if the mail sent by linkchecker can be received correctly.
        """
        pass

    def generate_test_data_excel_workbook(self, path_of_excel_workbook_generated):
        exemplar_report_data = [
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
            ['Some', 'example', 'data', 'to', 'fill', 'the', 'excel', 'sheet'],
        ]

        file_i = report_generating.ReportCreator(
            path_of_excel_workbook_generated)
        file_i.append_report_data(report_generating.LABELS,
                                  BOLD &
                                  CENTER &
                                  DEFAULT_FONTNAME &
                                  DEFAULT_FONTSIZE)
        file_i.append_report_data(exemplar_report_data,
                                  DEFAULT_FONTNAME &
                                  DEFAULT_FONTSIZE)
        file_i.add_general_autofilter()
        file_i.cell_width_autofitter()
        file_i.safe_workbook()

    def set_up_test_environment(self):
        """Set up a Plone Site having working and broken Links as well as
        working and broken relations.
        We creates the mentioned in the type 'link' as well as inside of
        text fields.
        """
        self.grant('Manager')
        page_one = create(Builder('document')
                          .titled('First Site'))
        page_two = create(Builder('document')
                          .titled('Second Site'))
        page_three = create(Builder('document')
                            .titled('Third Site'))
        pass
