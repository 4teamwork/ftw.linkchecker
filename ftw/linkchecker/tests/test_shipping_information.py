from ftw.linkchecker.link_accumulation import Accumulator
from ftw.linkchecker.per_site_configuration import PerSiteConfiguration
from ftw.linkchecker.report_generating import ReportHandler
from ftw.linkchecker.tests import FunctionalTestCase
from ftw.linkchecker.tests.helpers import ConfigurationMock
from ftw.linkchecker.tests.helpers import generate_test_data_excel_workbook
from ftw.testing.mailing import Mailing
from zope.component.hooks import setSite
import email
import os
import pandas as pd


CURRENT_PATH = os.path.dirname(os.path.abspath(__file__))


class TestShippingInformation(FunctionalTestCase):

    def test_if_excel_generator_adds_content_correctly(self):
        """Test if an excel workbook generated by the linkchecker does not
        differ an exemplar workbook containing the expected data.
        """
        path_of_excel_workbook_exemplar = (
                CURRENT_PATH +
                '/exemplar_data/expected_excel_sheet_outcome.xlsx')

        xlsx_file = generate_test_data_excel_workbook()

        # import the excel workbooks as pandas dataframes
        df1 = pd.read_excel(xlsx_file)
        df2 = pd.read_excel(open(path_of_excel_workbook_exemplar, "rb"))

        diff_xlsx_files = pd.concat([df1, df2]).drop_duplicates(keep=False)

        assert df1.equals(df2), \
            "The examplar excel workbook converges from the one generated." \
            "The diff occured in following lines \n\n{}".format(
                diff_xlsx_files)

    def test_if_mail_sender_sending_mail_incl_attachement(self):
        """Test if the mail sent by linkchecker can be received correctly.
        """
        # setUp
        Mailing(self.layer['portal']).set_up()
        portal = self.layer['portal']
        setSite(portal)

        # Get configuration, collect links and send report
        configuration = ConfigurationMock(
                'In real I would be *args comming from argparser.')
        site = PerSiteConfiguration(portal, configuration)
        accumulator = Accumulator(site)
        accumulator.discover_broken_links()
        self.paths_from = [link_obj.link_origin for link_obj in
                           accumulator.internal_broken_link_objs +
                           accumulator.external_broken_link_objs]
        report_handler = ReportHandler(site, accumulator)
        report_handler.send_report()

        # get the two mails sent before from queue
        mail2 = Mailing(portal).pop()
        mail1 = Mailing(portal).pop()
        mail_obj1 = email.message_from_string(mail1)
        mail_obj2 = email.message_from_string(mail2)

        # make sure both mails are sent and have the correct address
        self.assertEqual(
            mail_obj1.get('To'), 'hugo.boss@4teamwork.ch',
            'The email is expected to be sent to hugo.boss@4teamwork.ch.')

        self.assertEqual(
            mail_obj2.get('To'), 'peter.wurst@4teamwork.ch',
            'The email is expected to be sent to peter.wurst@4teamwork.ch.')

        # make sure both emails send the attachment
        self.assertEqual(
            mail_obj1.get_payload()[1].get_content_type(),
            'application/octet-stream',
            'The emails attachement is expected to be a binary file.')

        self.assertEqual(
            mail_obj2.get_payload()[1].get_content_type(),
            'application/octet-stream',
            'The emails attachement is expected to be a binary file.')

        # tearDown
        Mailing(self.layer['portal']).tear_down()
